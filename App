import azure.functions as func
import logging
import json
import pymssql

# Create the Azure Function app instance
app = func.FunctionApp(http_auth_level=func.AuthLevel.FUNCTION)

@app.route(route="WriteBackPBI")
def WriteBackPBI(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("Function triggered for dynamic write-back")

    try:
        # Parse incoming JSON body
        req_body = req.get_json()

        if "Table" not in req_body:
            return func.HttpResponse("Missing required field: 'Table'", status_code=400)

        table_key = req_body["Table"]

        #  Allowed table whitelist with primary key
        allowed_tables = {
            "Test": {
                "sql_name": "[Config].[Test]",
                "key": "JobID"
            },
            "Customer_Details": {
                "sql_name": "[Config].[Customer_Details]",
                "key": "Cst_ID"
            }
        }

        if table_key not in allowed_tables:
            return func.HttpResponse("Unauthorized or unknown table", status_code=403)

        table_info = allowed_tables[table_key]
        table_name = table_info["sql_name"]
        primary_key = table_info["key"]

        if primary_key not in req_body:
            return func.HttpResponse(f"Missing required primary key: '{primary_key}'", status_code=400)

        #  Clean input for actual columns
        clean_data = {k: v for k, v in req_body.items() if k != "Table" and v is not None}

        if len(clean_data) <= 1:
            return func.HttpResponse("No valid data to insert/update", status_code=400)

        #  Connect to SQL Server
        conn = pymssql.connect(
            server='sqlserver-<Database >-dev.database.windows.net', # change it with your Servr name 
            user='<Your user name>', # change it wit your user name 
            password='<your password>', # change it with your password 
            database='<DataBase Name>' # change it with your Database 
        )
        cursor = conn.cursor()

        #  Check for existing record
        pk_value = clean_data[primary_key]
        cursor.execute(f"SELECT COUNT(*) FROM {table_name} WHERE {primary_key} = %s", (pk_value,))
        exists = cursor.fetchone()[0] > 0

        if exists:
            # Build UPDATE query
            update_columns = ", ".join(f"{col} = %s" for col in clean_data if col != primary_key)
            update_values = [clean_data[col] for col in clean_data if col != primary_key]
            update_values.append(pk_value)
            update_query = f"UPDATE {table_name} SET {update_columns} WHERE {primary_key} = %s"
            cursor.execute(update_query, update_values)
            message = f" Updated {primary_key} = {pk_value} in '{table_key}'"
        else:
            # Build INSERT query
            columns = ", ".join(clean_data.keys())
            placeholders = ", ".join(["%s"] * len(clean_data))
            values = list(clean_data.values())
            insert_query = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
            cursor.execute(insert_query, values)
            message = f" Inserted {primary_key} = {pk_value} into '{table_key}'"

        conn.commit()
        cursor.close()
        conn.close()

        return func.HttpResponse(message, status_code=200)

    except Exception as e:
        logging.error(f" Error occurred: {e}")
        return func.HttpResponse(f"Internal server error: {str(e)}", status_code=500)
